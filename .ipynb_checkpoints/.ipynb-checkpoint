{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Import Spacy"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import spacy\n",
    "from spacy import displacy\n",
    "nlp = spacy.load(\"nl_core_news_lg\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Read file 523 -> make sure NL-HaNA_1.04.02_6847_0523.txt is in working directory"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [],
   "source": [
    "lines = []\n",
    "\n",
    "with open(\"NL-HaNA_1.04.02_6847_0523.txt\", \"r\") as handle:\n",
    "    lines = [l.strip() for l in handle.readlines() if len(l.strip()) > 0]\n",
    "    \n",
    "    \n",
    "text = \" \".join(lines)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Correction function based on manual correction excel\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [],
   "source": [
    "file_name = \"manual237.523.xlsx\"\n",
    "import pandas as pd\n",
    "df = pd.read_excel(io=file_name)\n",
    "\n",
    "def correct_doc(text):\n",
    "    for i, row in df.iterrows():\n",
    "        if row.Mistake in text.split():\n",
    "            text = text.replace(row.Mistake, row.Correction)\n",
    "    return text"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### List of Entities extracted from spaCy NER"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [],
   "source": [
    "def ent_ls(text):\n",
    "    ents = []\n",
    "    doc = nlp(text)\n",
    "    for ent in doc.ents:\n",
    "        if ent.label_ in [\"PERSON\", \"GPE\"]:\n",
    "            ents += [(ent.text, ent.label_)]\n",
    "    return ents         "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[('mijner sekerheit', 'PERSON'),\n",
       " ('Lijsje van mijn', 'PERSON'),\n",
       " ('stond/', 'GPE'),\n",
       " ('Batavia', 'GPE'),\n",
       " ('opheeren', 'GPE'),\n",
       " ('raeden M', 'PERSON'),\n",
       " ('r Pautus van selivelden M', 'PERSON'),\n",
       " ('r Anthonij Cornelis verspijck', 'PERSON'),\n",
       " ('Batavia', 'GPE'),\n",
       " ('Batavia', 'GPE'),\n",
       " ('ut supra', 'GPE'),\n",
       " ('onselieve', 'GPE'),\n",
       " ('raede M', 'PERSON'),\n",
       " ('r Paulus van Lelivelden', 'PERSON'),\n",
       " ('Mr Anthonij Cornelis Verspijcksaluit', 'PERSON'),\n",
       " ('Johanna Veertruida', 'PERSON'),\n",
       " ('Assuerus van den Berg', 'PERSON'),\n",
       " ('deese raede', 'PERSON'),\n",
       " ('van rij/', 'PERSON'),\n",
       " ('hope soude', 'PERSON'),\n",
       " ('mante', 'GPE'),\n",
       " ('des doelijk', 'GPE'),\n",
       " ('accordeeren', 'GPE'),\n",
       " ('r geijsbertus Maas', 'PERSON'),\n",
       " ('versogten genomineert', 'PERSON'),\n",
       " ('Committeeren', 'GPE'),\n",
       " ('Johanna geextruida', 'PERSON'),\n",
       " ('Asuerus van den Bergh', 'PERSON'),\n",
       " ('Geijsbert', 'PERSON'),\n",
       " ('Jacob welgevaere', 'PERSON'),\n",
       " ('aangaende de vessoluttie', 'PERSON'),\n",
       " ('deese raede', 'PERSON'),\n",
       " ('volkomemagt authoriteijten', 'PERSON'),\n",
       " ('ontbeiden', 'GPE'),\n",
       " ('obideeren', 'GPE'),\n",
       " ('P', 'GPE')]"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ent_ls(text)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[('mijner sekerheit', 'PERSON'),\n",
       " ('Lijsje van mijn', 'PERSON'),\n",
       " ('stond/', 'GPE'),\n",
       " ('Batavia', 'GPE'),\n",
       " ('Paulus van Lelivelden', 'PERSON'),\n",
       " ('r Anthonij Cornelis', 'PERSON'),\n",
       " ('Actun Batavia', 'PERSON'),\n",
       " ('agtbare', 'GPE'),\n",
       " ('deses Casteelen', 'PERSON'),\n",
       " ('Batavia', 'GPE'),\n",
       " ('ut supra', 'GPE'),\n",
       " ('onselieve', 'GPE'),\n",
       " ('raede M', 'PERSON'),\n",
       " ('r Paulus van Lelivelden', 'PERSON'),\n",
       " ('Mr Anthonij Cornelis Verspijck', 'PERSON'),\n",
       " ('Johanna Geertruida Lahaije', 'PERSON'),\n",
       " ('den Comman', 'PERSON'),\n",
       " ('Assuerus van den Berg', 'PERSON'),\n",
       " ('bijj', 'PERSON'),\n",
       " ('deese raede', 'PERSON'),\n",
       " ('gecondemneert', 'PERSON'),\n",
       " ('hope soude', 'PERSON'),\n",
       " ('mante', 'GPE'),\n",
       " ('des doelijk', 'GPE'),\n",
       " ('bijj haer', 'PERSON'),\n",
       " ('accordeeren', 'GPE'),\n",
       " ('bijj', 'GPE'),\n",
       " ('r geijsbertus Maas', 'PERSON'),\n",
       " ('versogten genomineert', 'PERSON'),\n",
       " ('bijj dese', 'PERSON'),\n",
       " ('Johanna Geertruida de Lahaije', 'PERSON'),\n",
       " ('Asuerus van den Bergh', 'PERSON'),\n",
       " ('Geijsbert', 'PERSON'),\n",
       " ('aangaende de vessoluttie', 'PERSON'),\n",
       " ('deese raede', 'PERSON'),\n",
       " ('magt authoriteijten', 'PERSON'),\n",
       " ('ontbeiden', 'GPE'),\n",
       " ('obijdeeren', 'GPE')]"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ent_ls(correct_doc(text))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Brat Annotations list"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [],
   "source": [
    "from tqdm import tqdm\n",
    "\n",
    "import gzip\n",
    "import os\n",
    "\n",
    "import random\n",
    "\n",
    "import re\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "import pandas\n",
    "\n",
    "corpus = \"./Corpus/\"\n",
    "anns = \"./523Ann/\"\n",
    "\n",
    "def load(file, corpus, lines=False):\n",
    "    with open(os.path.join(corpus, file), \"r\") as handle:\n",
    "        if lines:\n",
    "            return list(handle) # handle.readlines()\n",
    "        else:\n",
    "            return handle.read()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [],
   "source": [
    "def read_csv(file, corpus=anns):\n",
    "    file = load(file, corpus, lines=True)\n",
    "\n",
    "    for i, line in enumerate(file):\n",
    "        if i == 0: print(\"first line:\", line) #to see brat format\n",
    "        tab_cols = line.split(\"\\t\")\n",
    "        \n",
    "        if tab_cols[0].startswith(\"T\"):\n",
    "            last = tab_cols[-1].strip()\n",
    "            first = tab_cols[0]\n",
    "            \n",
    "            middle = tab_cols[1].split()\n",
    "#             print(middle, middle[0], middle[-1])\n",
    "            middle = [middle[0], middle[1], middle[-1]]\n",
    "            \n",
    "            yield (first, *middle, last)\n",
    "            \n",
    "def filter_rows(rows):\n",
    "    for r in rows:\n",
    "        if r[1].upper() in [\"PERSON\", \"GPE\"]:\n",
    "        #if r[1].upper() in [\"PERSON\", \"ORG\", \"GPE\", \"WOMEN\", \"INDIGENOUS\", \"MEN\"]:\n",
    "            yield r\n",
    "        \n",
    "def change_rows(rows):\n",
    "    for r in rows:\n",
    "        entity_nr, entity_type, start, end, label = r\n",
    "        yield int(start), int(end), entity_type.upper(), label\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "first line: T1\tPerson 200 216\tI: G: De Cahaije\n",
      "\n"
     ]
    }
   ],
   "source": [
    "data = {}\n",
    "\n",
    "for ann_f in os.listdir(anns):\n",
    "    if not ann_f.endswith('.ann'): continue\n",
    "        \n",
    "    if len(load(ann_f, anns)) > 0:\n",
    "        cur_name = ann_f.strip(\".ann\")\n",
    "    \n",
    "        txt_f = cur_name + \".txt\"\n",
    "        if os.path.isfile(os.path.join(corpus, txt_f)):\n",
    "        \n",
    "            #raw_text = load(txt_f, corpus)\n",
    "            brat_entity_list = list(change_rows(filter_rows(read_csv(ann_f, anns))))\n",
    "            \n",
    "            data[txt_f] = (brat_entity_list)\n",
    "        else:\n",
    "            print(\"no file\", txt_f)\n",
    "    else:\n",
    "        print(\"annotation file empty\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'NL-HaNA_1.04.02_6847_0523.txt': [(200, 216, 'PERSON', 'I: G: De Cahaije'),\n",
       "  (236, 243, 'GPE', 'Batavia'),\n",
       "  (474, 501, 'PERSON', 'Anthonij Cornelis verspijck'),\n",
       "  (576, 590, 'PERSON', 'G: P Welgevare'),\n",
       "  (872, 893, 'PERSON', 'Paulus van Lelivelden'),\n",
       "  (897, 924, 'PERSON', 'Anthonij Cornelis Verspijck'),\n",
       "  (937, 963, 'PERSON', 'Johanna Veertruida Lahaije'),\n",
       "  (1023, 1044, 'PERSON', 'Assuerus van den Berg'),\n",
       "  (1885, 1901, 'PERSON', 'geijsbertus Maas'),\n",
       "  (1965, 1994, 'PERSON', 'Johanna geextruida de Lahaije'),\n",
       "  (2007, 2028, 'PERSON', 'Asuerus van den Bergh'),\n",
       "  (2080, 2095, 'PERSON', 'Geijsbert Jacob'),\n",
       "  (735, 743, 'PERSON', 'Wâ€žm kege'),\n",
       "  (508, 515, 'GPE', 'Batavia'),\n",
       "  (695, 702, 'GPE', 'Batavia'),\n",
       "  (806, 821, 'GPE', 'Casteel batavia')]}"
      ]
     },
     "execution_count": 42,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [],
   "source": [
    "brat_ls = []\n",
    "for x in list(data.values()):\n",
    "    for y in x:\n",
    "        brat_ls += [(y[3],y[2])]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[('I: G: De Cahaije', 'PERSON'),\n",
       " ('Batavia', 'GPE'),\n",
       " ('Anthonij Cornelis verspijck', 'PERSON'),\n",
       " ('G: P Welgevare', 'PERSON'),\n",
       " ('Paulus van Lelivelden', 'PERSON'),\n",
       " ('Anthonij Cornelis Verspijck', 'PERSON'),\n",
       " ('Johanna Veertruida Lahaije', 'PERSON'),\n",
       " ('Assuerus van den Berg', 'PERSON'),\n",
       " ('geijsbertus Maas', 'PERSON'),\n",
       " ('Johanna geextruida de Lahaije', 'PERSON'),\n",
       " ('Asuerus van den Bergh', 'PERSON'),\n",
       " ('Geijsbert Jacob', 'PERSON'),\n",
       " ('Wâ€žm kege', 'PERSON'),\n",
       " ('Batavia', 'GPE'),\n",
       " ('Batavia', 'GPE'),\n",
       " ('Casteel batavia', 'GPE')]"
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "brat_ls"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Improvement in BRAT"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Difference in corrected document 0.40816326530612246\n",
      "Match with actual annotations and uncorrected document 0.21428571428571427\n",
      "Match with actual annotations and corrected document 0.2857142857142857\n"
     ]
    }
   ],
   "source": [
    "def jaccard(words1, words2):\n",
    "    s1, s2 = set(words1), set(words2)\n",
    "    return len(s1 & s2)/len(s1 | s2)\n",
    "\n",
    "c4 = list(set(brat_ls) & set(ent_ls(correct_doc(text))))\n",
    "c3 = list(set(brat_ls) & set(ent_ls(text)))\n",
    "\n",
    "print('Difference in corrected document', jaccard(ent_ls(correct_doc(text)),ent_ls(text)))\n",
    "print('Match with actual annotations and uncorrected document', jaccard(brat_ls, c3))\n",
    "print('Match with actual annotations and corrected document', jaccard(brat_ls, c4))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Unfortunately only a 7% improvement with our corrections : ( However, while spaCy made only some minor mistakes, like an extra alphabet, that is not counted in this very basic code that I wrote. But if we were to include closest word matchings, I would expect spaCy to perform better and our improvements to be as high as 20-25%)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
